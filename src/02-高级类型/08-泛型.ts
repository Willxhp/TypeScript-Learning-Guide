// 泛型可以在保证类型安全的前提下，让函数与多种类型一起工作，从而实现复用，常用于函数、接口和class中
 
// 创建泛型函数，在函数名称的后面添加<>，尖括号中添加类型变量，类型变量是一种特殊类型的变量，处理类型而不是值
// 此处Type就是一个类型变量，相当于一个类型容器，能够捕获用户提供的类型，可以是任意合法的变量名称
function id<Type>(value: Type): Type {
  return value  
}

// 调用泛型函数，在函数名称的后面添加<>，尖括号中指定具体的类型
const num = id<number>(1)
const str = id<string>('')
const isLoading = id<boolean>(true)

// 简化调用泛型函数，可以省略<类型>来简化泛型函数的调用
// 此时，ts内部会采用类型参数推断的机制来根据传入的实参自动推断出类型变量Type的类型
// 当编译器无法推断类型或者推断不准确时，需要显示地传入类型参数
const n1 = id(2) // 此时推断的类型为2，并非是number